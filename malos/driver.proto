/*
 * Copyright 2016-2017 Matrix Labs
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package matrix_malos;

// configuration of drivers. Both global configuration and
// for specific drivers.
message DriverConfig {
  // Delay between updates. In seconds.
  float delay_between_updates = 1;
  // Timeout after last ping.
  float timeout_after_last_ping = 2;

  // Values for LEDs. When configuring the driver you should leave
  // delay_between_updates and timeout_after_last_ping unchanged.
  EverloopImage image = 3;

  // Malos-Eye configuration.
  MalosEyeConfig malos_eye_config = 4;

  // ZigBee configuration for bulbs.
  ZigbeeBulbConfig zigbee_bulb = 5;

  // LIRC service configuration for IR commands.
  LircParams lirc = 6;

  // ServoMotor service configuration 
  ServoParams servo = 7;

  // Gpio service configuration
  GpioParams gpio = 8;

  // Humidity configuration
  HumidityParams humidity = 9;

  // Microphone Array configuration
  MicArrayParams  micarray = 10;  
}


enum EnumMalosEyeDetectionType {
  // Stop. Don't do detections.
  // This only makes sense when this is the only command sent to MalosEye.
  STOP = 0;
  // Detect faces.
  FACE = 20;
  // Detect faces and enhance the detection with demographics.
  // This might involve a connection to a remote detection server.
  FACE_DEMOGRAPHICS = 21;
  // Thumb.
  HAND_THUMB_UP = 40;
  HAND_PALM = 41;
  HAND_PINCH = 42;
  HAND_FIST = 43;
}

// Configuration for MALOS-eye. If object_to_detect has at least
// one element the rest of the configuration will be ignored and the
// objects to be detected will change acordingly.
message MalosEyeConfig {
  // Camera configuration. Camera id, width, height, and so on.
  CameraConfig camera_config = 1;
  // Configuration of the object detector.l
  ObjectDetectorConfig detector_config = 2;
  // Tracker configuration.
  TrackerConfig tracker_config = 3;
  // Configuration of the detection server.
  DetectionServerConfig detection_server_config = 4;
  // Detections to perform. When this field is set the other fields
  // are ignored.
  repeated EnumMalosEyeDetectionType object_to_detect = 21;
}

message CameraConfig {
  // What camera to open? 0 is usually the first camera.
  int32 camera_id = 1;
  // Capture width, i.e. 640.
  int32 width = 2;
  // Capture height, i.e. 480.
  int32 height = 3;
}

message ObjectDetectorConfig {
  // Cascade path that the program can open
  string cascade_path = 1;
}

// These settings could depend on time and not on frames, as frame-rate
// depends on the resolution.
message TrackerConfig {
  // In how many frames does the object need to be before being taken
  // into account?
  int32 frames_to_count = 1;
  // Once we stop seeing the object, how many frames should we wait before
  // we discard the object?
  int32 frames_to_discard = 2;
}

message DetectionServerConfig {
  // Detection server connection string. For instance, "127.0.0.1:32061".
  string detection_server_address = 1;
  // Timeout for detection server (in milliseconds).
  int32 detection_server_timeout = 2;
}

// Message used by MALOS to report its internal state and the configuration of
// its drivers.
message DriverInfo {
  // Driver name.
  string driver_name = 1;
  // Base port: Port where the device is located.
  // base_port => config channel (0MQ pull, you should push)
  // base_port + 1 => keepalive channel (0MQ pull, you should push)
  // base_port + 2 => error channel (0MQ push, you should pull)
  // base_port + 3 => send update channel (0MQ push, you should pull)
  int32 base_port = 2;

  // Does the device provide updates? Some devices such as the everloop
  // LED array don't provide updates.
  bool provides_updates = 3;
  // What is the device delay between updates? In milliseconds.
  // This field only makes sense if provides_updates is set.
  int32 delay_between_updates = 4;

  // Does the device need pings (keepalive messages) to keep returning messages?
  bool needs_pings = 5;
  // This field only makes sense if needs_pings is set.
  // If the device hasn't received keepalive messages in a time interenal
  // bigger than this amount, the device will stop sending updates.
  int32 timeout_after_last_ping = 6;

  // Notes set by the driver. Meant to be read by humans.
  string notes_for_human = 7;
}

// Information about all the available drivers.
message MalosDriverInfo {
  // The available drivers.
  repeated DriverInfo info = 1;
}

// Dummy lecture.
message Dummy {
  // Random value.
  float value = 1;
}

// Basic Humidity lecture.
message Humidity {
  // Humidity.
  float humidity = 1;

  // Temperature.
  float temperature = 2;

  // Raw temperature value from the sensor.
  float temperature_raw = 3;

  //  Flag that tells if the temperature is calibrated
  bool temperature_is_calibrated = 4 ;
}

message HumidityParams{
  // Current temperature used for calibration.
  float current_temperature = 1; 
}

// Basic UV radiation lecture.
message UV{
  // UV index.
  float uv_index = 1;

  // Risk of harm from unprotected sun exposure, for the average adult.
  // Accordin to the OMS table. https://www.epa.gov/sunsafety/uv-index-scale-0
  string oms_risk = 2;
}


// Basic Pressure lecture.
message Pressure {
  // Pressure.
  float pressure = 1;

  // Altimeter.
  float altitude = 2;

  // Temperature.
  float temperature = 3;
}


// Basic Pressure lecture.
message Imu {
  //Vertical axis (yaw)
  float yaw = 1;

  //Lateral axis (pitch)
  float pitch = 2;

  //Longitudinal axis (roll)
  float roll = 3;

  // acceleration
  float accel_x = 4;
  float accel_y = 5;
  float accel_z = 6;

  // gyroscope
  float gyro_x = 7;
  float gyro_y = 8;
  float gyro_z = 9;

  // magnetometer
  float mag_x = 10;
  float mag_y = 11;
  float mag_z = 12;
}

// Value for a led. Values range from 0 to 255.
message LedValue {
  uint32 red = 1;
  uint32 green = 2;
  uint32 blue = 3;
  uint32 white = 4;
}

// The led array.
message EverloopImage {
  repeated LedValue led = 1;
}


/* ZigBee messages */

message ZigbeeBulbConfig {
    // IP address or host name.
    string address = 1;
    // The port.
    int32 port = 2;
    // ZigBee command.
    ZigBeeBulbCmd command = 3;
}

// Network start event
message ZigBeeNetworkStatus {
  // ZigBee is active
  bool is_active = 1;
  
  // ID shared by all nodes in the network
  uint32 pan_id = 2;

  // ID of the node  (in the network)
  uint32 short_id = 3;
}

// ZigBee device announce
message ZigBeeAnnounce {
  // ID of the announced node
  uint32 short_id = 1;

  // Cluster Id for ZCL command
  uint32 cluster_id = 2;

  // ZigBee device object command
  uint32 zdo_command = 3;

  // ZigBee device object status
  uint32 zdo_status = 4;
}

// ZigBee bulb commands
message ZigBeeBulbCmd {
  // ID of the bulb node
  uint32 short_id = 1;

  // Enpoint. This is used in the send commands after the
  // short_id. We are still figuring out how to use the ZigBee protocol for
  // bulbs thus for the moment we will assume that when this value is 0xb
  // we're dealing with a Philips bulb, and when it's 0 (default value) we're
  // using a generic brand (whatever that means, we need to do more tests).
  uint32 endpoint = 4;

  enum EnumCommands {
    ON = 0;
    OFF = 1;
    TOGGLE = 2;
    LEVEL = 3;
    IDENTIFY = 4;
    COLOR = 5;
  }

  // Bulb commands
  EnumCommands command = 2;

  // Params of the bulb commands. Used by LEVEL and COLOR commands.
  repeated uint32 params  = 3;
}


// LIRC service params
message LircParams {
  // IR remote device name
  string device = 1;

  // IR command
  string command = 2;
}

// Servo handler params
message ServoParams {
  // GPIO to config
  uint32 pin = 1;

  // GPIO mode
  uint32 angle = 2; 
}

// GPIO handler params
message GpioParams {
  // GPIO to config
  uint32 pin = 1;

  // GPIO mode input/output
  enum EnumMode {
    INPUT = 0;
    OUTPUT = 1;
  }
  EnumMode mode = 2;

  // GPIO value
  uint32 value = 3;

  // GPIO vector value
  uint32 values = 4;
}

// Microphone Array params
message MicArrayParams {
  // gain for all microphones
  int32 gain = 1;

  // Spherical coordinates for beamforming (azimutal_angle,
  // polar_angle, radial_distance_mm).
  //
  // azimutal angle (must lie between -pi/2 an pi/2)
  float azimutal_angle  = 2;
  
  // polar angle (must lie between -pi/2 an pi/2)
  float polar_angle = 3;

  // distance from the center of the MATRIX Creator to the sound source.
  float radial_distance_mm = 4;

  // sound speed in mm/seg  
  float sound_speed_mmseg = 5;
}

