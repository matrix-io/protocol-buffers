
/*
 * Copyright 2016-2017 Matrix Labs
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package matrix_io.malos.v1.io;

option go_package = "github.com/matrix-io/go-matrix-protos/matrix_io/malos/v1";
option csharp_namespace = "MatrixIO.Malos.IO.V1";
option java_multiple_files = true;
option java_outer_classname = "IOProto";
option java_package = "one.matrixio.proto.malos.v1";

// Value for a led. Values range from 0 to 255.
message LedValue {
  uint32 red = 1;
  uint32 green = 2;
  uint32 blue = 3;
  uint32 white = 4;
}

// The led array.
message EverloopImage {
  repeated LedValue led = 1;

  // Number of leds in the Everloop
  int32 everloop_length = 2;
}

// Servo handler params
message ServoParams {
  // GPIO to config
  uint32 pin = 1;

  // Servo angle
  uint32 angle = 2;
}

// GPIO handler params
message GpioParams {
  // GPIO to config
  uint32 pin = 1;

  // GPIO mode input/output
  enum EnumMode {
    INPUT = 0;
    OUTPUT = 1;
  }
  EnumMode mode = 2;

  // GPIO value
  uint32 value = 3;

  // GPIO vector value
  uint32 values = 4;
}

// Microphone Array params
message MicArrayParams {
  // gain for all microphones
  int32 gain = 1;

  // Spherical coordinates for beamforming (azimutal_angle,
  // polar_angle, radial_distance_mm).
  //
  // azimutal angle (must lie between -pi/2 an pi/2)
  float azimutal_angle  = 2;

  // polar angle (must lie between -pi/2 an pi/2)
  float polar_angle = 3;

  // distance from the center of the MATRIX Creator to the sound source.
  float radial_distance_mm = 4;

  // sound speed in mm/seg
  float sound_speed_mmseg = 5;

  //sampling frequency in Hz
  uint32 sampling_frequency_hz = 6;
}

message WakeWordParams {
  // Wake Word
  string wake_word = 1;

  // Mic channel
  enum MicChannel {
    channel0 = 0;
    channel1 = 1;
    channel2 = 2;
    channel3 = 3;
    channel4 = 4;
    channel5 = 5;
    channel6 = 6;
    channel7 = 7;
    channel8 = 8;
  }

  MicChannel channel = 2;

  // lenguaje model path from lmtool or similar alternative:
  // http://www.speech.cs.cmu.edu/tools/lmtool-new.html
  string lm_path = 3;

  // dictionary path from lmtool
  string dic_path = 4;

  // enable pocketsphinx verbose mode
  bool enable_verbose = 5;

  // stop recognition service
  bool stop_recognition = 6;
}

message MatrixDeviceParams {
  // Matrix Device Type (1: CREATOR - 2:VOICE)
  EnumMatrixDeviceType device_type = 1;
}

enum EnumMatrixDeviceType {
  // Undetected device.
  UNDETECTED = 0;

  // Detected MATRIX Creator.
  CREATOR = 1;

  // Detected MATRIX Creator.
  VOICE = 2;
}
