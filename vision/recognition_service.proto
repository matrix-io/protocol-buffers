/*
 * Copyright 2016-2017 Matrix Labs
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package admobilize_vision;

import "vision_service.proto";
import "recognition.proto";

service RecognitionService {

  // Store a descriptor 
  //
  // The received message may:
  //   - contain the calculated descriptors
  //   - contain a VisionRequest with a populated ImageList field
  //   - contain a VisionRequest with a populated Video field
  //
  // The tags field is mandatory for a store call to be successful.
  // When device_id field is set, the descriptor will be scoped
  // to the given device IDs, meaning that only Recognize() requests from such
  // device IDs will match those descriptors.
  // 
  // Returned Message
  // When the save is successful, a list of unique string UUIDs identifying
  // the stored descriptors
  rpc StoreFeatureDescriptors(StoreFeatureDescriptorsRequest) 
    returns (StoreFeatureDescriptorsResponse) {}

  // Obtain a list of descriptors
  //
  // Returned Message
  // A list of descriptors according to provided uuids, tags and device_id.
  // if both uuid and device_id are defined, only descriptors
  // associated with the given device ID will be returned. The same
  // applies for tags and device_id.
  //
  // If no uuid, tags or devices_id fields are defined, all available 
  // descriptor will be returned.
  //
  // An empty list will be returned if no descriptors are found
  rpc GetFeatureDescriptors(GetFeatureDescriptorsRequest) 
    returns (GetFeatureDescriptorsResponse) {}

  // Delete descriptors saved under a user account
  //
  // Method will delete all descriptors matching provided uuids or tags. 
  // When matching tags, descriptors matching any tag will be returned.
  //
  // When a device_id is provided, only those associated with the device will
  // be deleted.
  rpc DeleteFeatureDescriptors(DeleteFeatureDescriptorsRequest) 
    returns (DeleteFeatureDescriptorsResponse) {}

  // Request a set of all available descriptor tags for the user account
  // grouped by device id
  rpc GetFeatureDescriptorTags(GetFeatureDescriptorTagsRequest)
    returns (GetFeatureDescriptorTagsResponse) {}

  // Request a descriptor match against recognition services.
  //
  // For recognize requests to be possible, descriptors must first be
  // stored (see StoreFeatureDescriptors method). 
  // 
  // Recognize calls can include a variety of fields:
  //   - when feature_descriptor_list field is set, it will be used to perform the 
  //     match against stored descriptors.
  //   - when vision_request field is set, descriptors will first be calculated for
  //     the images and then matched against stored descriptors.
  rpc Recognize(RecognizeRequest) returns (RecognizeResponse) {}
}

// Message used when calling StoreDescriptors()
message StoreFeatureDescriptorsRequest {

  // Source images / video to obtain descriptors
  VisionRequest vision_request = 1;

  // Arbitrary tags to use for descriptors calculated from
  // vision_request. Ignored when feature_descriptors are set.
  // ie ['ruben', 'godoy family']
  repeated string tags = 2;

  // Set of descriptors
  repeated FeatureDescriptor feature_descriptors = 3;

  // Optional device IDs to associate the descriptor
  // with a set of devices
  repeated string device_id = 4;
}

// Message returned by StoreDescriptors()
message StoreFeatureDescriptorsResponse {

  // Stored descriptor IDS
  repeated string uuids = 1;
}

// Message used when calling GetDescriptors()
message GetFeatureDescriptorsRequest {

  // Specific descriptor uuids to obtain
  repeated string uuids = 1;

  // Specific tags to obtain. Ignored when uuids is defined.
  repeated string tags = 2;

  // Device ID to get descriptors for
  string device_id = 3;

  // Next page token when paginating
  string next_page_token = 4;
}

// Message returned by GetFeatureDescriptors()
message GetFeatureDescriptorsResponse {

  // Set of descriptors
  FeatureDescriptorList feature_descriptor_list = 1;

  // Token use for pagination when there are too many results
  string next_page_token = 2;
}

// Message used when calling DeleteFeatureDescriptors()
message DeleteFeatureDescriptorsRequest {

  // Stored descriptor IDs to delete
  repeated string uuids = 1;

  // Delete descriptors by tags, delete ALL descriptors
  // matching given tags. Ignored when uuid is set.
  repeated string tags = 2;
}

// Message returned by DeleteDescriptors()
message DeleteFeatureDescriptorsResponse {

  // UUIDs of deleted descriptors
  repeated string uuids = 1;
}

// Message used when calling Recognize()
message RecognizeRequest {

  // Source for VisionRequest for recognition
  VisionRequest vision_request = 1;

  // Set of descriptors
  FeatureDescriptorList feature_descriptor_list= 2;

  // Signals the desired algorithm for recognitions
  string matching_algorithm_version = 3;
}

// Message describes a descriptor match
message FeatureDescriptorMatch {

  // user set tags
  repeated string tags = 1;

  // Score for the match from 0 to 1. 
  // A smaller value means a closer match.
  // Statistical interpretation of the scores makes no sense with this value.
  float score = 2;
}

// Message returned by Recognize()
message RecognizeResponse {

  // List of matches 
  repeated FeatureDescriptorMatch matches = 1;
}

// Message used when calling GetFeatureDescriptorTags()
message GetFeatureDescriptorTagsRequest {

  // Device IDs to get descriptors tags for
  repeated string device_id = 1;
}

// Groups tags per device, so client apps can
// pull all tags and then present which tags
// are only registered under a specific device
message FeatureDescriptorTagsForDevice {

  // Available descriptor tags
  repeated string tags = 1;

  // If set, the above tags are only available in such device id
  string device_id = 2;
}

// Message returned by GetFeatureDescriptorTags()
message GetFeatureDescriptorTagsResponse {

  // Device ID to get descriptors tags for
  repeated FeatureDescriptorTagsForDevice feature_tags_for_device = 1;
}
